h1 Git

* Git is...

** a content addressable database
** and a version control system
** The version control system uses the database

* The database

** Most databases are location addressable: you store data in a location
** Git's database is a content addressable database, you put content in and it gives you back a fingerprint or hash.
** If you change a single piece of that content you get a new unique hash.
** All of the content you put into Git is called a repository
** When you put some Raw content into a repository it is called a blob
** A blob is just the contents of a file. It's doesn't contain any metadata: information about what the file is called and where it lives and what's changed
** A record of information about files, the Git database can store a treee
** A tree represents a folder; it collects together all the metadata about the blobs of raw data
** The point is: the Git database can store files and folders
** Everything stored by Git gets a unique hash that can be used to retrieve it later
** Once a file of folder has been stored, it can't be changed, ever. (Unlike a normal filing system)

* Version control

** It would be possible to just use the database to take regular snapshots of all the files and folders in your project
** But Git hashes are long and unfriendly, and writing down the hash of every snapshot is very inconvenient
** Git's version control system makes it easy to create and manage the snapshots
** records time and author of each snapshot
** let's you add a description
** Git calls every snapshot a commit
** the project's history is recorded as a series of commits
** Every commit gets stored forever in the Git database
** A commit contains 5 pieces of information
*** the hash of a tree (files & folders)
*** descriptive message
*** the name and email address of the person
*** date and time
*** the hash of the previous commit



