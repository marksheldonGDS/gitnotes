# Git presentation from @tomstuart / tom@codon.com

##Â Git is...

* a content addressable database, where you can store files forever
* and a version control system, creates snapshots of your work
* a distributed version control system that uses the database
* lightweight branches
** easily switch between contexts
** merge branches once work is finished

## The database

* Most databases are location addressable: you store data in a location
* Git's database is a content addressable database, you put content in and it gives you back a fingerprint or hash.
* If you change a single piece of that content you get a new unique hash.
* All of the content you put into Git is called a repository
* When you put some Raw content into a repository it is called a blob
* A blob is just the contents of a file. It's doesn't contain any metadata: information about what the file is called and where it lives and what's changed
* A record of information about files, the Git database can store a tree
* A tree represents a folder; it collects together all the metadata about the blobs of raw data
* The point is: the Git database can store files and folders
* Everything stored by Git gets a unique hash that can be used to retrieve it later
* Once a file of folder has been stored, it can't be changed, ever. (Unlike a normal filing system)

## Version control

* It would be possible to just use the database to take regular snapshots of all the files and folders in your project
* But Git hashes are long and unfriendly, and writing down the hash of every snapshot is very inconvenient
* Git's version control system makes it easy to create and manage the snapshots
* records time and author of each snapshot
* let's you add a description
* Git calls every snapshot a commit
* the project's history is recorded as a series of commits
* Every commit gets stored forever in the Git database
* A commit contains 5 pieces of information
** the hash of a tree (files & folders)
** descriptive message
** the name and email address of the person
** date and time
** the hash of the previous commit
* Git identifies the most recent commit by putting a label on it
* this label is called  branch
* a branch can have a name you like, but the default name is master
* the label master moves to the most recent commit 

## Git workflow

* you can check out a branch
** Git retrieves all the files and folders from the appropriate commit
* you make some changes
* you commit those changes
** Git stores all your files and folders, stores a new commit with your messages and moves the branch
* Creating a new branch, or checking out an existing one, is very fast and easy
* Git deliberately makes this easy as possible to encourage you to create branches
* Every time you start a new chunk of work (e.g. a "story") you can do it on a new branch
* If you get interrupted and need to work on something else, you can switch back to your main branch
* Your work on the new branch will still be there when you're ready to go back to it.
* When you've finished with a temporary branch, you can merge it with another branch, then delete it.
* Branches all have a common ancestor, when they were both the same
* Making a merge commit brings two branches together

## Git hands on

* Git provides a staging area for collecting all the changes you want to put into a commit
* The git add command puts a snapshot of the file into the staging area ready for a commit
* The git commit command puts the files in staging area into the git repository, with a message you add of what has changed.
* Git allows you to undo the changes from any commit, not just the most recent one
* Git stores snapshots, not changes
* If you ask for a commit to be reverted, Git first has to calculate what changes was introduced by that commit
* It compares the files & folders from that commit with those form the previous commit.
* To revert a change:
** find the hash of an earlier commit

## Questions:
* What should be the atomicity of the commit?

## Commands

* To initialise a git repository:
`git init`

* To review the status of git:
`git status`

* To review the log of git history:
`git log`

* To add a file to the repository staging area:
`git add <filename>`

* To commit everything in the staging area to the repository:
`git commit --message "A sensible message for the commit."`

* To revert changes in a commit:
`git revert <hash of the commit you want to revert>`

* To create a branch:
`git branch <branchname>`

* To view the branches you have:
`git branch`

* To merge a branch into master:
`git checkout master`
`git merge --message "A sensible message for the merge." <branchname>

* To ignore files:
`echo '.DS_Store' > .gitignore`
`cat .gitignore`
`git status`
`git add .gitignore`
`git commit --message "Ignore .DS_Store files"`

* To push a local repository into Github repository:
`git remote add origin https://github.com/marksheldonGDS/gitnotes.git`
`git push -u origin master`

* To fetch and then merge changes into your local repository from Github's remote origin/master branch:
`git fetch`
`git merge origin/master`

* To fetch and merge changes into your local repository from Github's remote origin/master branch in one go, essentially a fetch and merge:
`git pull`

* Blaming:
`git blame <filename>`

# Github features

* Forking a user on Github; it takes a complete copy of their repository and clone's it into your Github account as a remote repository. This fork then belongs to you. You do not have to be collaborators to do this. 
* Pull requests; having forked someone else's repository you can make a pull request on your changes which sends the repository's owner a message and allows them to merge those changes into their repository.
* Editing; you can pick any repository on Github, click an individual file and click Edit. If you are not a collaborator on the repository Github will then take a clone of that repository, makes those changes and submit a pull request back to the repository's owner.








